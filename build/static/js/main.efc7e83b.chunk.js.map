{"version":3,"sources":["utils/web3.ts","state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","state/hooks.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","contexts/ThemeContext.tsx","state/actions.ts","hooks/useRefresh.ts","contexts/Localisation/translationsContext.ts","components/layout/Container.tsx","components/layout/Page.tsx","hooks/useTheme.ts","utils/multicall.ts","config/constants/types.ts","utils/addressHelpers.ts","config/constants/pools.ts","config/constants/contracts.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx","config/constants/farms.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts"],"names":["RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","getWeb3","getContract","abi","address","contractOptions","eth","Contract","fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBalanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","div","pow","tokenPriceVsQuote","tokenSymbol","QuoteToken","USDC","quoteTokenSymbol","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","pid","info","totalAllocPoint","DmndPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","decimalsCalls","rawEarnings","parsedEarnings","rows","_","c","row","zip","earnings","decimals","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","ZERO","useFetchPublicData","useDispatch","slowRefresh","useRefresh","useEffect","useFarms","useSelector","useFarmFromPid","useFarmUser","usePriceBnbBusd","usePriceCakeBusd","useTotalValue","bnbPrice","cakePrice","value","i","length","val","WMATIC","CAKE","console","log","plus","nodes","process","getNodeUrl","randomIndex","random","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","interval","setInterval","prev","clearInterval","Provider","CACHE_KEY","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","localStorage","getItem","JSON","parse","setIsDark","prevState","setItem","stringify","theme","dark","light","useContext","fastRefresh","defaultTranslationState","translations","setTranslations","TranslationsContext","Container","styled","mediaQueries","sm","Page","lg","useTheme","StyledThemeCopntext","web3","multi","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","PoolCategory","getCakeAddress","addresses","cake","chainId","masterChef","mulltiCall","getWbnbAddress","weth","getLotteryAddress","lottery","getLotteryTicketAddress","lotteryNFT","pools","137","56","97","usdc","wmatic","matic","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","storedLang","filter","getStoredLang","fetch","then","r","json","translationApiResponse","catch","e","error","langObject","config","label","icon","href","items","Menu","props","useWallet","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","links","priceLink","Wrapper","PageLoader","Home","lazy","Farms","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","fallback","path","exact","tokenMode","component","memo","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","getBlockNumber","blockNumber","current","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","target","rel","src","alt","style","position","bottom","right","height","width","zIndex","document","getElementById","risk","lpSymbol","decimal","contracts","nonBnbPools","poolsConfig","p","stakingTokenName","BNB","bnbPools","nonMasterPools","sousId","masterChefContract","masterChefABI","fetchPoolsAllowance","stakingTokenAddress","contractAddress","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingDmnd","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward"],"mappings":"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","file":"static/js/main.efc7e83b.chunk.js","sourcesContent":["import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, httpProvider }\n","import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBalanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals\n      ] = await multicall(erc20, calls)\n\n\n      let tokenAmount;\n      let lpTotalInQuoteToken;\n      let tokenPriceVsQuote;\n      if (farmConfig.isTokenOnly) {\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\n\n        if (farmConfig.tokenSymbol === QuoteToken.USDC && farmConfig.quoteTokenSymbol === QuoteToken.USDC) {\n          tokenPriceVsQuote = new BigNumber(1);\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBalanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n      }\n      else {\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBalanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBalanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if (tokenAmount.comparedTo(0) > 0) {\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBalanceLP).div(new BigNumber(tokenBalanceLP)).times(new BigNumber(10).pow(tokenDecimals - quoteTokenDecimals));\n        }\n      }\n\n\n      const [info, totalAllocPoint, DmndPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'DmndPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.times(new BigNumber(10).pow(tokenDecimals - quoteTokenDecimals)).toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        DmndPerBlock: new BigNumber(DmndPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  });\n\n  // const decimalsCalls = farmsConfig.map((farm) => {\n  //   const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID];\n  //   return {\n  //     address: lpContractAddress,\n  //     name: 'decimals'\n  //   }\n  // });\n\n  const rawTokenBalances = await multicall(erc20ABI, calls);\n  // const tokenDecimals = await multicall(erc20ABI, decimalsCalls);\n\n  // const zip = rows => rows[0].map((_, c) => rows.map(row => row[c]));\n\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  });\n\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'pendingDmnd',\n      params: [farm.pid, account],\n    }\n  })\n\n  const decimalsCalls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID];\n    return {\n      address: lpContractAddress,\n      name: 'decimals'\n    }\n  });\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n\n  const tokenDecimals = await multicall(erc20ABI, decimalsCalls);\n\n  const zip = rows => rows[0].map((_, c) => rows.map(row => row[c]));\n\n  const parsedEarnings = zip([rawEarnings, tokenDecimals]).map(([earnings, decimals]) => {\n    // console.log(18 -decimals[0])\n    return new BigNumber(earnings).div(new BigNumber(10).pow(18 - decimals[0])).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    // dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  // console.log(farm.pid);\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 0; // WMATIC-USDC LP\n  const farm = useFarmFromPid(pid);\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  const pid = 1; // DMND-USDC LP\n  const farm = useFarmFromPid(pid);\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\n}\n\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms();\n  const bnbPrice = usePriceBnbBusd();\n  const cakePrice = usePriceCakeBusd();\n  // console.log(`farms`, farms)\n  // console.log(`bnbPrice`, bnbPrice)\n  // console.log(`cakePrice`, cakePrice)\n  let value = new BigNumber(0);\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (+farm.lpTotalInQuoteToken) {\n      let val;\n      // console.log(`val`, val)\n      // console.log(`farm.lpTotalInQuoteToken`, farm.lpTotalInQuoteToken)\n      if (farm.quoteTokenSymbol === QuoteToken.WMATIC) {\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\n      }\n      if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\n      } else {\n        console.log(`farm.lpTotalInQuoteToken`, farm.lpTotalInQuoteToken.toString())\n        val = (farm.lpTotalInQuoteToken);\n      }\n      value = value.plus(val);\n    }\n  }\n\n  // console.log(`value`, value.toNumber())\n  return value;\n}\n","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from '@pancakeswap-libs/uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 992px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  subTitle?: string\n  description?: string\n  launchDate: string\n  launchTime: string\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  projectSiteUrl: string\n  currency: string\n  currencyAddress: string\n  tokenDecimals: number\n  releaseBlockNumber: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'BNB',\n  'CAKE' = 'CAKE',\n  'SYRUP' = 'SYRUP',\n  'USDC' = 'USDC',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n  'WMATIC' = 'WMATIC',\n  'MATIC' = 'MATIC',\n  'WETH' = 'WETH',\n  'TITAN' = 'TITAN',\n  'USDT' = 'USDT',\n  'POLYGAME' = 'POLYGAME'\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  80001?: string\n  137: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isCommunity?: boolean\n  otherExchange?: string\n  risk: number\n  decimal: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.weth[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n  // {\n  //   sousId: 0,\n  //   tokenName: 'WMATIC',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   contractAddress: {\n  //     137: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270'\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://pancakeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '10',\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   tokenDecimals: 18,\n  // },\n  // {\n  //   sousId: 1,\n  //   tokenName: 'TWT',\n  //   stakingTokenName: QuoteToken.SYRUP,\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n  //   contractAddress: {\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://trustwallet.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '20',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","export default {\n  cake: {\n    137: '0xc2423d5Df6269eA774A3856568D2C424e894514D'\n  },\n  masterChef: {\n    137: '0xe4998AC7dD122256EeA5A37d6360c420D7d21653',\n  },\n  weth: {\n    137: \"0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\"\n  },\n  lottery: {\n    56: '',\n    97: '',\n  },\n  lotteryNFT: {\n    56: '',\n    97: '',\n  },\n  mulltiCall: {\n    137: '0x40524425bcb58Dc16f11746B0028e23aCDA1e128'\n  },\n  usdc: {\n    137: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174'\n  },\n  wmatic: {\n    137: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270'\n  },\n  matic: {\n    137: '0x0000000000000000000000000000000000001010'\n  }\n}\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Kanit', sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  // ZHCN,\n  // ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      // console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then(r=>r.json())\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error(\"ERROR\");\n          console.error(e);\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\n\nconst config: MenuEntry[] = [\n  {\n    label: 'Home',\n    icon: 'HomeIcon',\n    href: '/',\n  },\n  {\n    label: 'Trade',\n    icon: 'TradeIcon',\n    items: [\n      {\n        label: 'Exchange',\n        href: 'https://quickswap.exchange/#/swap?outputCurrency=0x5d5aA3e0636C413473218DDF1E5a1ceCe8679B16',\n      },\n      {\n        label: 'Liquidity',\n        href: 'https://quickswap.exchange/#/pool',\n      },\n    ],\n  },\n  {\n    label: 'Farms',\n    icon: 'FarmIcon',\n    href: '/farms',\n  },\n  {\n    label: 'Pools',\n    icon: 'PoolIcon',\n    href: '/pools',\n  },\n  // {\n  //   label: 'Pools',\n  //   icon: 'PoolIcon',\n  //   href: '/pools',\n  // },\n  {\n    label: 'Voting (Coming Soon)',\n    icon: 'IfoIcon',\n    href: '/voting',\n  },\n  {\n    label: '',\n    icon: 'NftIcon',\n    href: '/vaults',\n  },\n  {\n    label: 'Info',\n    icon: 'InfoIcon',\n    items: [\n      {\n        label: 'Dex Guru Chart',\n        href: 'https://dex.guru/token/0x5d5aa3e0636c413473218ddf1e5a1cece8679b16-polygon',\n      },\n      {\n        label: 'Polygon Scan',\n        href: 'https://polygonscan.com/address/0x5d5aA3e0636C413473218DDF1E5a1ceCe8679B16',\n      },\n      {\n        label: 'Featured on vFat',\n        href: 'https://vfat.tools/polygon/polydmnd/',\n      },\n      {\n        label: 'Featured on Dapp Radar',\n        href: 'https://dappradar.com/polygon/defi/polydmnd-finance',\n      },\n    ]\n  },\n  {\n    label: \"More\",\n    icon: \"MoreIcon\",\n    items: [\n      // {\n      //   label: \"Voting\",\n      //   href: \"https://voting.pancakeswap.finance\",\n      // },\n      {\n        label: \"Github\",\n        href: \"https://github.com/swimming777/polydmnd-frontend-main\",\n      },\n      {\n        label: \"Docs\",\n        href: \"https://polydmnd.gitbook.io/polydmnd/contracts/socials\",\n      },\n      // {\n      //   label: \"Blog\",\n      //   href: \"https://goosefinance.medium.com/\",\n      // },\n    ],\n  },\n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\nimport config from './config'\n\nconst Menu = (props) => {\n  const { account, connect, reset } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const cakePriceUsd = usePriceCakeBusd()\n\n  return (\n    <UikitMenu\n      account={account}\n      login={connect}\n      logout={reset}\n      isDark={isDark}\n      toggleTheme={toggleTheme}\n      currentLang={selectedLanguage && selectedLanguage.code}\n      langs={allLanguages}\n      setLang={setSelectedLanguage}\n      cakePriceUsd={cakePriceUsd.toNumber()}\n      links={config}\n      priceLink=\"https://info.quickswap.exchange/token/0x5d5aA3e0636C413473218DDF1E5a1ceCe8679B16\"\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from '@pancakeswap-libs/uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData } from 'state/hooks'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/Farms'))\n// const Lottery = lazy(() => import('./views/Lottery'))\n// const Pools = lazy(() => import('./views/Pools'))\n// const Ifos = lazy(() => import('./views/Ifos'))\nconst NotFound = lazy(() => import('./views/NotFound'))\n// const Nft = lazy(() => import('./views/Nft'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  useFetchPublicData()\n\n  return (\n    <Router>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route path=\"/farms\">\n              <Farms />\n            </Route>\n            <Route path=\"/pools\">\n              <Farms tokenMode />\n            </Route>\n            {/* <Route path=\"/pools\"> */}\n            {/*  <Pools /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/lottery\"> */}\n            {/*  <Lottery /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/ifo\"> */}\n            {/*  <Ifos /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/nft\"> */}\n            {/*  <Nft /> */}\n            {/* </Route> */}\n            {/* Redirect */}\n            {/* <Route path=\"/staking\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/syrup\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* 404 */}\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n      {/* <NftGlobalNotification /> */}\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n              bsc,\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n      <a href=\"https://rugdoc.io/project/polydmnd/\" target=\"_blank\" rel=\"noreferrer\">\n        <img src=\"https://rugdoc.io/assets/2021/06/rugdoc-review-badge-with-glow.png\" alt=\"Rug Dr Approval Badge\" style={{ position: 'fixed', bottom: 0, right: 0, height: '110px', width: 'auto', zIndex: 100000 }} />\n      </a>\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n  /* {\n    pid: 21,\n    risk: 5,\n    lpSymbol: 'DMND-POLYGAME LP',\n    decimal: 18,\n    lpAddresses: {\n      137: '0x332f240e779e96a5b764903d97748996cb7ec60b',\n    },\n    tokenSymbol: 'DMND',\n    tokenAddresses: {\n      137: '0x5d5aA3e0636C413473218DDF1E5a1ceCe8679B16',\n    },\n    quoteTokenSymbol: QuoteToken.POLYGAME,\n    quoteTokenAdresses: contracts.polygame,\n  }, */\n  {\n    pid: 1,\n    risk: 5,\n    lpSymbol: 'DMND-USDC LP',\n    decimal: 18,\n    lpAddresses: {\n      137: '0xf0101ca9381e81cbd8ceea1151cdbb50ca312404',\n    },\n    tokenSymbol: 'DMND',\n    tokenAddresses: {\n      137: '0xc2423d5Df6269eA774A3856568D2C424e894514D',\n    },\n    quoteTokenSymbol: QuoteToken.USDC,\n    quoteTokenAdresses: contracts.usdc,\n  }, \n  {\n    pid: 2,\n    risk: 5,\n    lpSymbol: 'DMND-WMATIC LP',\n    decimal: 18,\n    lpAddresses: {\n      137: '0xd4ef16ccb63cbbd277420bd58c76e3a9ab0e2398',\n    },\n    tokenSymbol: 'WMATIC',\n    tokenAddresses: {\n      137: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    },\n    quoteTokenSymbol: QuoteToken.CAKE,\n    quoteTokenAdresses: contracts.cake,\n  },\n  /* {\n    pid: 22,\n    risk: 5,\n    lpSymbol: 'POLYGAME-WMATIC LP',\n    decimal: 18,\n    lpAddresses: {0x6eb44a746a94b2b4a44f07983f8752f82867f56a\n    tokenAddresses: {\n      137: '0xe68361e0f58d0c1e38a5392dd7e0c6bb5cd66833',\n    },\n    quoteTokenSymbol: QuoteToken.WMATIC,\n    quoteTokenAdresses: contracts.wmatic,\n  },\n  /* {\n    pid: 17,\n    risk: 5,\n    lpSymbol: 'WETH-TITAN LP',\n    decimal: 18,\n    lpAddresses: {\n      137: '0xa28ade2f27b9554b01964fdce97ed643301411d9',\n    },\n    tokenSymbol: 'WETH',\n    tokenAddresses: {\n      137: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n    },\n    quoteTokenSymbol: QuoteToken.TITAN,\n    quoteTokenAdresses: contracts.usdc,\n  },\n  {\n    pid: 18,\n    risk: 5,\n    lpSymbol: 'POLYGAME-USDC LP',\n    decimal: 18,\n    lpAddresses: {\n      137: '0x32a606b8b6945350c429c0ad4e6b932ed2b1794f',\n    },\n    tokenSymbol: 'POLYGAME',\n    tokenAddresses: {\n      137: '0xe68361E0f58D0C1e38A5392Dd7e0c6BB5CD66833',\n    },\n    quoteTokenSymbol: QuoteToken.USDC,\n    quoteTokenAdresses: contracts.usdc,\n  }, */\n  {\n    pid: 0,\n    risk: 5,\n    lpSymbol: 'WMATIC-USDC LP',\n    decimal: 18,\n    lpAddresses: {\n      137: '0x6e7a5fafcec6bb1e78bae2a1f0b612012bf14827',\n    },\n    tokenSymbol: 'WMATIC',\n    tokenAddresses: {\n      137: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    },\n    quoteTokenSymbol: QuoteToken.USDC,\n    quoteTokenAdresses: contracts.usdc,\n  },\n\n  /* {\n    pid: 3,\n    risk: 5,\n    lpSymbol: 'WETH-USDC LP',\n    decimal: 18,\n    lpAddresses: {\n      137: '0x853ee4b2a13f8a742d64c8f088be7ba2131f670d',\n    },\n    tokenSymbol: 'WETH',\n    tokenAddresses: {\n      137: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n    },\n    quoteTokenSymbol: QuoteToken.USDC,\n    quoteTokenAdresses: contracts.usdc,\n  },\n\n\n\n\n  // {\n  //   pid: 1,\n  //   risk: 5,\n  //   lpSymbol: 'EGG-BNB LP',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0xd1b59d11316e87c3a0a069e80f590ba35cd8d8d3',\n  //   },\n  //   tokenSymbol: 'EGG',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BNB,\n  //   quoteTokenAdresses: contracts.wbnb,\n  // },\n  // {\n  //   pid: 2,\n  //   risk: 3,\n  //   lpSymbol: 'USDC-USDT LP',\n  //   lpAddresses: {\n  //     137: '0x2cF7252e74036d1Da831d11089D326296e64a728'\n  //   },\n  //   tokenSymbol: 'USDC',\n  //   tokenAddresses: {\n  //     137: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 12,\n  //   risk: 5,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'EGG',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019', // EGG-BUSD LP\n  //   },\n  //   tokenSymbol: 'EGG',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // }, */\n  {\n    pid: 3,\n    risk: 5,\n    isTokenOnly: true,\n    lpSymbol: 'DMND',\n    decimal: 18,\n    lpAddresses: {\n      137: '0xf0101ca9381e81cbd8ceea1151cdbb50ca312404'\n    },\n    tokenSymbol: 'DMND',\n    tokenAddresses: {\n      137: '0xc2423d5Df6269eA774A3856568D2C424e894514D'\n    },\n    quoteTokenSymbol: QuoteToken.USDC,\n    quoteTokenAdresses: contracts.usdc,\n  },\n  /* {\n    pid: 19,\n    risk: 1,\n    isTokenOnly: true,\n    lpSymbol: 'POLYGAME',\n    decimal: 18,\n    lpAddresses: {\n      137: '0x32a606b8b6945350c429c0ad4e6b932ed2b1794f'\n    },\n    tokenSymbol: 'POLYGAME',\n    tokenAddresses: {\n      137: '0xe68361E0f58D0C1e38A5392Dd7e0c6BB5CD66833'\n    },\n    quoteTokenSymbol: QuoteToken.USDC,\n    quoteTokenAdresses: contracts.usdc,\n  },\n  {\n    pid: 20,\n    risk: 1,\n    isTokenOnly: true,\n    lpSymbol: 'TITAN',\n    decimal: 18,\n    lpAddresses: {\n      137: '0x8af511761c74af631258d8ee6096679ff4838cde'\n    },\n    tokenSymbol: 'TITAN',\n    tokenAddresses: {\n      137: '0xaaa5b9e6c589642f98a1cda99b9d024b8407285a'\n    },\n    quoteTokenSymbol: QuoteToken.USDC,\n    quoteTokenAdresses: contracts.usdc,\n  }, \n  {\n    pid: 5,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'WMATIC',\n    decimal: 18,\n    lpAddresses: {\n      137: '0x6e7a5fafcec6bb1e78bae2a1f0b612012bf14827'\n    },\n    tokenSymbol: 'WMATIC',\n    tokenAddresses: {\n      137: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270'\n    },\n    quoteTokenSymbol: QuoteToken.USDC,\n    quoteTokenAdresses: contracts.usdc,\n  },\n\n  {\n    pid: 6,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'QUICK',\n    decimal: 18,\n    lpAddresses: {\n      137: '0x1f1e4c845183ef6d50e9609f16f6f9cae43bc9cb'\n    },\n    tokenSymbol: 'QUICK',\n    tokenAddresses: {\n      137: '0x831753dd7087cac61ab5644b308642cc1c33dc13'\n    },\n    quoteTokenSymbol: QuoteToken.USDC,\n    quoteTokenAdresses: contracts.usdc,\n  },\n\n  {\n    pid: 7,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'WETH',\n    decimal: 18,\n    lpAddresses: {\n      137: '0x853ee4b2a13f8a742d64c8f088be7ba2131f670d'\n    },\n    tokenSymbol: 'WETH',\n    tokenAddresses: {\n      137: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619'\n    },\n    quoteTokenSymbol: QuoteToken.USDC,\n    quoteTokenAdresses: contracts.usdc,\n  },\n\n  {\n    pid: 8,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'WBTC',\n    decimal: 6,\n    lpAddresses: {\n      137: '0xf6a637525402643b0654a54bead2cb9a83c8b498'\n    },\n    tokenSymbol: 'WBTC',\n    tokenAddresses: {\n      137: '0x1bfd67037b42cf73acf2047067bd4f2c47d9bfd6'\n    },\n    quoteTokenSymbol: QuoteToken.USDC,\n    quoteTokenAdresses: contracts.usdc,\n  },\n\n\n  {\n    pid: 9,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'AAVE',\n    decimal: 18,\n    lpAddresses: {\n      137: '0x7c76b6b3fe14831a39c0fec908da5f17180df677'\n    },\n    tokenSymbol: 'AAVE',\n    tokenAddresses: {\n      137: '0xd6df932a45c0f255f85145f286ea0b292b21c90b'\n    },\n    quoteTokenSymbol: QuoteToken.USDC,\n    quoteTokenAdresses: contracts.usdc,\n  },\n\n\n\n\n\n  {\n    pid: 11,\n    risk: 1,\n    isTokenOnly: true,\n    lpSymbol: 'DAI',\n    decimal: 18,\n    lpAddresses: {\n      137: '0xf04adbf75cdfc5ed26eea4bbbb991db002036bdd'\n    },\n    tokenSymbol: 'DAI',\n    tokenAddresses: {\n      137: '0x8f3cf7ad23cd3cadbd9735aff958023239c6a063'\n    },\n    quoteTokenSymbol: QuoteToken.USDC,\n    quoteTokenAdresses: contracts.usdc,\n  },\n\n  {\n    pid: 10,\n    risk: 1,\n    isTokenOnly: true,\n    lpSymbol: 'USDT',\n    decimal: 6,\n    lpAddresses: {\n      137: '0x2cf7252e74036d1da831d11089d326296e64a728'\n    },\n    tokenSymbol: 'USDT',\n    tokenAddresses: {\n      137: '0xc2132d05d31c914a87c6611c10748aeb04b58e8f'\n    },\n    quoteTokenSymbol: QuoteToken.USDC,\n    quoteTokenAdresses: contracts.usdc,\n  },\n  {\n    pid: 12,\n    risk: 1,\n    isTokenOnly: true,\n    lpSymbol: 'FISH',\n    decimal: 18,\n    lpAddresses: {\n      137: '0x0df9e46c0eaedf41b9d4bbe2cea2af6e8181b033'\n    },\n    tokenSymbol: 'FISH',\n    tokenAddresses: {\n      137: '0x3a3df212b7aa91aa0402b9035b098891d276572b'\n    },\n    quoteTokenSymbol: QuoteToken.USDC,\n    quoteTokenAdresses: contracts.usdc,\n  }, */\n\n\n]\n\nexport default farms\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingDmnd('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n"],"sourceRoot":""}